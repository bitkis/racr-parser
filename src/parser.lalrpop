use std::str::FromStr;
use racr;
use std::ops::Range;

grammar;

// Comma seperated list allowing trailing comma
Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Bar seperated list allowing trailing bar
Bar<T>: Vec<T> = { // (1)
    <v:(<T> "|")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Access: racr::Access = {
    "ReadOnly" => racr::Access::ReadOnly,
    "WriteOnly" => racr::Access::WriteOnly,
    "ReadWrite" => racr::Access::ReadWrite,
};

Offset: usize = {
    r"0x[[:xdigit:]]*" => usize::from_str_radix(<>.to_string().get(2..).unwrap(), 16).unwrap(),
    r"[[:digit:]]*" => usize::from_str(<>).unwrap(),
}

Size: usize = {
    r"[[:digit:]]*" => usize::from_str(<>).unwrap(),
}

BitValue: u128 = {
    r"0x[[:xdigit:]]*" => u128::from_str_radix(<>.to_string().get(2..).unwrap(), 16).unwrap(),
    r"0b[[:xdigit:]]*" => u128::from_str_radix(<>.to_string().get(2..).unwrap(), 2).unwrap(),
    r"[[:digit:]]*" => u128::from_str(<>).unwrap(),
}

String: String = r##""[^"]*""##  => {let mut s = String::from(<>); s.pop(); s.remove(0); s};
Ident: racr::Ident = r"[[:alpha:]][[:alnum:]]*" => <>.into();

Documentation: String = "#[" "doc" "=" <String> "]" => <>;

pub Path: racr::Path = {
    <head: Ident> <tail: ("::" <Ident>)*> => {let mut segments = vec![head]; segments.append(&mut tail.clone()); racr::Path{segments}},
}

pub Module: racr::Module = {
    "mod" <Ident> ";" => racr::Module{ident: <>, content: None},
    "mod" <ident: Ident> "{" <content: Content> "}" => racr::Module{ident: ident, content: Some(content)},
}

pub Item: racr::Item = {
    Use => racr::Item::Use(<>),
    Module => racr::Item::Mod(<>),
    DeviceDefinition => racr::Item::Device(<>),
    PeripheralDefinition => racr::Item::Peripheral(<>),
    RegisterDefinition => racr::Item::Register(<>),
}

pub Content: Vec<racr::Item> = Item* => <>;

UseName: racr::UseTree = Ident => racr::UseTree::Ident(<>);
UsePath: racr::UseTree = <path_segment: Ident> "::" <sub_tree: UseTree> => racr::UseTree::Path{path_segment, sub_tree: Box::new(sub_tree)};
UseRename: racr::UseTree = <ident: Ident> "as" <rename: Ident> => racr::UseTree::Rename{<>};

UseTree: racr::UseTree = {
    UsePath => <>,
    UseName => <>,
    UseRename => <>,
}

pub Use: racr::Use = "use " <UseTree> ";" => racr::Use{tree: <>};

BitRange: Range<usize> = {
    "[" <start: Offset> ".." <end: Offset> "]" => start..end,
    "[" <Offset> "]" => <>..(<>+1),
}

BitSize: usize = "[" <Offset> "]" => <>;

FieldVariant: racr::FieldVariant = {
    <documentation: Documentation?>
    <ident: Ident> "=" <value: BitValue>
    => racr::FieldVariant{<>}
}

FieldInstance: racr::FieldInstance = {
    <documentation: Documentation?> <access: Access?> <ident: Ident> <bit_range: BitRange> => racr::FieldInstance { <>, variants: Vec::new() },
    <documentation: Documentation?> <access: Access?> <ident: Ident> <bit_range: BitRange> "{" <variants: Comma<FieldVariant>> "}" => racr::FieldInstance { <> },
}

pub RegisterDefinition: racr::RegisterDefinition = {
    <documentation: Documentation?> 
    <access: Access> "register" <size: BitSize> <ident: Ident> <reset_value: ("=" <BitValue>)?> "{" 
        <fields: Comma<FieldInstance>> 
    "}" 
    => racr::RegisterDefinition{<>}
}

RegisterType: racr::RegisterType = {
    <path: Path> => racr::RegisterType::Single{<>},
    "[" <path: Path> ";" <size: Size> "]" => racr::RegisterType::Array{<>},
}

RegisterInstance: racr::RegisterInstance = {
    <ident: Ident> ":" <ty: RegisterType> => racr::RegisterInstance{<>}
}

RegisterSlot: racr::RegisterSlot = {
    <instance: RegisterInstance> "@" <offset: Offset> => racr::RegisterSlot::Single{<>},
    "(" <alternatives: Bar<RegisterInstance>> ")" "@" <offset: Offset> => {
        if alternatives.len() == 1 {
            racr::RegisterSlot::Single{instance: alternatives[0].clone(), offset}
        } else {
            racr::RegisterSlot::Overloaded{<>}
        }
    }
}

pub PeripheralDefinition: racr::PeripheralDefinition = {
    <documentation: Documentation?>
    "peripheral" <ident: Ident> "{"
        <registers: Comma<RegisterSlot>>
    "}"
    => racr::PeripheralDefinition{<>}
}

PeripheralInstance: racr::PeripheralInstance = {
    <ident: Ident> ":" <path: Path> "@" <address: Offset> => racr::PeripheralInstance{<>}
}

pub DeviceDefinition: racr::DeviceDefinition = {
    <documentation: Documentation?>
    "device" <ident: Ident> "{"
        <peripherals: Comma<PeripheralInstance>>
    "}"
    => racr::DeviceDefinition{<>}
}
